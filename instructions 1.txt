
# üîß Plan for the Application
We are building a [PLACEHOLDER_APP_TYPE] using [PLACEHOLDER_STACK]. It should:
1. Implement all required features described in the Requirements section below.
2. Use Test-Driven Development (TDD) for each feature.
3. Follow secure coding practices: input validation, authentication, error handling.
4. Be modular, well-documented, and optimized for performance.

# üìã Requirements
- Use clean and secure code practices.
- Follow proper project structure and naming conventions.
- All input should be validated (avoid injection attacks, enforce schema checks).
- Implement authentication for protected routes.
- Unit and integration tests must be written for each feature before implementation.
- Auto-update `requirements.txt` (or package.json) when new dependencies are added.
- Document setup steps, development commands, and instructions in README.md.
- Generate summaries and commit messages after every major development step.

# ‚úÖ Current State of Development
## Progress Update (DATE)
- Project scaffold created with basic structure and configuration.
- README.md initialized with setup and dev instructions.
- Placeholder requirements defined and committed.
- Awaiting feature implementation using TDD methodology.

## Milestones
- ‚úÖ Initial project setup and environment configuration
- ‚è≥ Feature 1: User authentication setup
- ‚è≥ Feature 2: Secured API routes for user profiles
- ‚è≥ Feature 3: Admin dashboard for managing users/settings
- ‚è≥ Feature 4: Public API for viewing content
- ‚è≥ Write README.md usage documentation and add dev/test instructions
- ‚è≥ CI setup for testing and deployment
- ‚è≥ Final test review, cleanup, and deployment readiness

## Notes for Next Developer/Agent
- Always read the full plan before working on a feature.
- Follow test-first development.
- Validate inputs and add authentication where needed.
- Maintain updated test coverage.
- Update this file after each session with:
  - What was implemented or tested
  - Any challenges or decisions made
  - What‚Äôs next

# üîÅ Reusable Prompt for AI Agent Continuation
You are continuing the development of this application based on the plan in this file. Your tasks are:
1. Read all instructions and understand the current state.
2. Pick the next required feature or milestone.
3. Generate a test-plan for that feature and wait for user review.
4. Once test plan is approved, implement the feature using TDD.
5. After completing a step, update the "Current State of Development" section with details.
6. Always document new files, code functions, and design decisions.
7. After each round of work, append a new section in this file titled "What‚Äôs Next" with a TODO list for the next agent/developer.
8. Suggest clean and meaningful commit messages.

# üß™ How to Generate test-plan.txt Automatically
Read the next milestone from this file, and generate a file `test-plan.txt` using the following format:

Feature: [Feature Name]

Test Cases:
- [ ] Should do X when given valid input
- [ ] Should reject when Y condition is met
- [ ] Should validate input fields (name, email, etc.)
- [ ] Should authenticate the user before performing action Z
- [ ] Should return appropriate errors for invalid states

Integration:
- [ ] Works with other modules or routes correctly
- [ ] Handles edge cases and rollback if needed
